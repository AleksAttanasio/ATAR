<launch>
    <arg name= "left_cam_name" value= "left" />
    <arg name= "right_cam_name" value= "right" />

    <!-- Parameters regarding the transformations among the cams, arms and
        world frame.
        Namespace is here because params used to be used by other nodes...-->
    <group ns="calibrations">
        <rosparam command="load" file="$(find atar)/launch/params_calibrations_ar.yaml" />
    </group>

    <!--____________________________________________________________________-->
    <!-- Node recording the data-->
    <node pkg="atar" type="gui" name="gui" output="screen">
    </node>

    <!--____________________________________________________________________-->
    <!-- This node is now supposed to generate the ac geometry, control task states, and overlay graphics-->
    <node pkg="atar" type="ar_core" name="ar_core" output="screen">

        <!-- About cam_name:
        1- Expecting to find the intrinsic calibration file of each camera in
         ~/.ros/camera_info/ named as <cam_name>_intrinsics.xml or on the
         camera_info topic. if not intrinsic calibration is started.

        2- Expecting to read the camera images from the topic:
        /cam_<cam_number>_name/image_raw
        Use remap if the images are published on a different topic. For example:
        <remap from="/$(arg left_cam_name)/image_raw" to="/dvrk/$(arg
        left_cam_name)/image_raw"/>
        -->
        <param name= "cam_0_name" value= "$(arg left_cam_name)" />
        <param name= "cam_1_name" value= "$(arg left_cam_name)" />
        <param name= "cam_2_name" value= "$(arg right_cam_name)" />

        <!--REMAP TOPICS -->
        <remap from="/$(arg left_cam_name)/image_raw" to="/endoscope/$(arg
        left_cam_name)/image_raw"/>
        <remap from="/$(arg right_cam_name)/image_raw" to="/endoscope/$(arg
        right_cam_name)/image_raw"/>
        <remap from="/$(arg left_cam_name)/camera_info" to="/endoscope/$(arg
        left_cam_name)/camera_info"/>
        <remap from="/$(arg right_cam_name)/camera_info" to="/endoscope/$(arg
        right_cam_name)/camera_info"/>

        <!--Charuco board used for extrinsic, intrinsic and manipulator to
        world calibrations. Vector consists of: -->
        <!--[dictionary_id, board_w, board_h, square_length_in_meters,
        marker_length_in_meters]-->
        <rosparam param="board_params"> [0, 6, 4, 0.0247, 0.0185]</rosparam>

        <!--The directory of mesh and textures -->
        <param name= "resources_directory" value= "$(find atar)/resources" />

        <!--add shadows to the graphics. Works on dedicated GPUs -->
        <!--NOTE: SHADOWS DON'T WORK IF THERE ARE MORE THAN ONE WINDOW.
        MULTIPLE VIEWS IN ONE WINDOW IS FINE-->
        <param name= "with_shadows" value= "true" />

        <!--Grab images from the gpu and publish them on a topic. CAN
        EXTREMELY DETERIORATE PERFORMANCE-->
        <param name= "publish_overlaid_images" value= "false" />

        <!--If the generated images are to be published on
        ros, to help alleviate the considerable bottleneck of grabbing the
        images from the gpu, activate this flag so that the rendering is done
         off screen and not shown in opengl windows.-->
        <param name= "offScreen_rendering" value= "false" />

        <!-- <param name="image_transport" value="compressed"/> --> <!--
         Remove if image is not received over network -->
    </node>


    <!--____________________________________________________________________-->
    <!--The teleop dummy nodes simulate a slave by simply incrementing the
        position of the end-effector of a master to allow for clutching, and
        handle the buttons etc.-->
    <node pkg="atar" type="teleop_dummy_dvrk" name="teleop_dummy_dvrk"
          output="screen">
        <param name="slave_1_name" value="$(arg slave_1_name)"/>
        <param name="master_1_name" value="$(arg master_1_name)"/>
        <param name="slave_2_name" value="$(arg slave_2_name)"/>
        <param name="master_2_name" value="$(arg master_2_name)"/>
        <param name="scaling" value="0.5"/>
        <rosparam param="initial_slave1_position"> [0.03, 0.04, 0.05]</rosparam>
        <rosparam param="initial_slave2_position"> [0.07, 0.05, 0.05]</rosparam>
    </node>

</launch>

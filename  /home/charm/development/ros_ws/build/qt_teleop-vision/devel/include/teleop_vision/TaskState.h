// Generated by gencpp from file teleop_vision/TaskState.msg
// DO NOT EDIT!


#ifndef TELEOP_VISION_MESSAGE_TASKSTATE_H
#define TELEOP_VISION_MESSAGE_TASKSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teleop_vision
{
template <class ContainerAllocator>
struct TaskState_
{
  typedef TaskState_<ContainerAllocator> Type;

  TaskState_()
    : task_name()
    , task_state(0)
    , number_of_repetition(0)
    , time_stamp(0.0)
    , position_error_norm(0.0)  {
    }
  TaskState_(const ContainerAllocator& _alloc)
    : task_name(_alloc)
    , task_state(0)
    , number_of_repetition(0)
    , time_stamp(0.0)
    , position_error_norm(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_name_type;
  _task_name_type task_name;

   typedef uint8_t _task_state_type;
  _task_state_type task_state;

   typedef uint8_t _number_of_repetition_type;
  _number_of_repetition_type number_of_repetition;

   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef double _position_error_norm_type;
  _position_error_norm_type position_error_norm;




  typedef boost::shared_ptr< ::teleop_vision::TaskState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teleop_vision::TaskState_<ContainerAllocator> const> ConstPtr;

}; // struct TaskState_

typedef ::teleop_vision::TaskState_<std::allocator<void> > TaskState;

typedef boost::shared_ptr< ::teleop_vision::TaskState > TaskStatePtr;
typedef boost::shared_ptr< ::teleop_vision::TaskState const> TaskStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teleop_vision::TaskState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teleop_vision::TaskState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace teleop_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'teleop_vision': ['/home/charm/development/ros_ws/src/teleop-vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::teleop_vision::TaskState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teleop_vision::TaskState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teleop_vision::TaskState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teleop_vision::TaskState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teleop_vision::TaskState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teleop_vision::TaskState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teleop_vision::TaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88680b1f4b0d4199c729e843287035e4";
  }

  static const char* value(const ::teleop_vision::TaskState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88680b1f4b0d4199ULL;
  static const uint64_t static_value2 = 0xc729e843287035e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::teleop_vision::TaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teleop_vision/TaskState";
  }

  static const char* value(const ::teleop_vision::TaskState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teleop_vision::TaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string task_name\n\
uint8 task_state\n\
uint8 number_of_repetition\n\
float64 time_stamp\n\
float64 position_error_norm\n\
";
  }

  static const char* value(const ::teleop_vision::TaskState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teleop_vision::TaskState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_name);
      stream.next(m.task_state);
      stream.next(m.number_of_repetition);
      stream.next(m.time_stamp);
      stream.next(m.position_error_norm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teleop_vision::TaskState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teleop_vision::TaskState_<ContainerAllocator>& v)
  {
    s << indent << "task_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task_name);
    s << indent << "task_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task_state);
    s << indent << "number_of_repetition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number_of_repetition);
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "position_error_norm: ";
    Printer<double>::stream(s, indent + "  ", v.position_error_norm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TELEOP_VISION_MESSAGE_TASKSTATE_H
